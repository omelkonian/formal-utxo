open import Level          using (0‚Ñì)
open import Function       using (_‚àò_; case_of_; _$_)
open import Category.Monad using (RawMonad)

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.Unit    using (‚ä§; tt)
open import Data.Bool    using (Bool; T; true; false; if_then_else_; not)
open import Data.Product using (_√ó_; _,_; ‚àÉ; ‚àÉ-syntax; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum     using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe   using (Maybe; just; nothing; fromMaybe; maybe)
open import Data.Fin     using (Fin; to‚Ñï; from‚Ñï<)
  renaming (suc to fsuc; zero to fzero)
open import Data.Nat     using (‚Ñï; _<_; z‚â§n; s‚â§s; _+_; _‚â°·µá_)
  renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.List    using (List; []; _‚à∑_; [_]; map; length; filter)

open import Data.Bool.Properties  using (T?)
  renaming (_‚âü_ to _‚âüùîπ_)
open import Data.Maybe.Properties using (just-injective)
import Data.Maybe.Categorical as MaybeCat
open RawMonad {f = 0‚Ñì} MaybeCat.monad renaming (_‚äõ_ to _<*>_)

open import Data.List.Relation.Unary.Any as Any           using (Any; here; there)
open import Data.List.Relation.Unary.AllPairs             using ([]; _‚à∑_)
open import Data.List.Relation.Unary.All                  using (All; all; []; _‚à∑_)
open import Data.List.Membership.Propositional            using (_‚àà_; _‚àâ_; find; mapWith‚àà)
open import Data.List.Membership.Propositional.Properties using (‚àà-map‚Åª; ‚àà-map‚Å∫; ‚àà-filter‚Åª)

open import Relation.Nullary.Decidable                  using (‚åä_‚åã; toWitness)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; cong)
-- open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)

open import Prelude.General
open import Prelude.Lists

open import UTxO.Hashing
open import UTxO.Value
open import UTxO.Types hiding (I)
open import UTxO.TxUtilities
open import UTxO.Validity
open import StateMachine.Base

open InputInfo

module Bisimulation.Base
  {S I : Set} {{_ : IsData S}} {{_ : IsData I}} {sm : StateMachine S I}
  where

open CEM {sm = sm}

_‚Äî‚Üí[_]_ : S ‚Üí I ‚Üí (S √ó TxConstraints) ‚Üí Set
s ‚Äî‚Üí[ i ] (s‚Ä≤ , tx‚â°) = step‚Çõ‚Çò s i ‚â° just (s‚Ä≤ , tx‚â°)

infix 30 _‚Äî‚Üí[_‚à∂-_]_
_‚Äî‚Üí[_‚à∂-_]_ : ‚àÄ {l} ‚Üí ValidLedger l ‚Üí (tx : Tx) ‚Üí IsValidTx tx l ‚Üí ValidLedger (tx ‚à∑ l) ‚Üí Set
vl ‚Äî‚Üí[ tx ‚à∂- vtx ] vl‚Ä≤ = vl‚Ä≤ ‚â° vl ‚äï tx ‚à∂- vtx

_~_ : ‚àÄ {l} ‚Üí ValidLedger l ‚Üí S ‚Üí Set
_~_ {l} _ s = (toData s) ‚ôØ·µà ‚àà ( map (datumHash ‚àò out)
                              ‚àò filter ((_‚âüùîπ true) ‚àò (_‚â•·∂ú thread‚Çõ‚Çò) ‚àò value ‚àò out)
                              ‚àò filter ((ùïç ‚âü‚Ñï_) ‚àò address ‚àò out)
                              -- ‚àò map out
                              ) (utxo l)

-- alternative definition (T0D0: replace everywhere)
-- _~‚Ä≤_ : ‚àÄ {l} ‚Üí ValidLedger l ‚Üí S ‚Üí Set
-- _~‚Ä≤_ {l} _ s = Any (Œª o ‚Üí (address o ‚â° ùïç) √ó (datumHash o ‚â° toData s ‚ôØ·µà) √ó (nft‚Çõ‚Çò ‚àà·∂ú value o)) (map out $ utxo l)

view-~ : ‚àÄ {l} {s : S} {vl : ValidLedger l}
  ‚Üí vl ~ s
  ‚Üí ‚àÉ[ prevTx ] ‚àÉ[ v ] (Œ£[ prevOut‚àà ‚àà (s ‚Äî‚Üí v ‚àà outputs prevTx) ]
      let
        oRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚àà)
        out  = record { address = ùïç; datumHash = toData s ‚ôØ·µà; value = v }
        u    = record { prevTx = prevTx; out = out; outRef = oRef }
      in ( u ‚àà utxo l
         √ó prevTx ‚àà l
         √ó oRef ‚àà map outRef (utxo l)
         √ó (getSpentOutputRef l oRef ‚â° just out)
         √ó ((v ‚â•·∂ú thread‚Çõ‚Çò) ‚â° true)
         ))
view-~ {l} {s} vl~s
  with ‚àà-map‚Åª (datumHash ‚àò out) vl~s
... | u@(record {prevTx = prevTx; out = record {value = v}}) , out‚àà , refl
  with ‚àà-filter‚Åª ((_‚âüùîπ true) ‚àò (_‚â•·∂ú thread‚Çõ‚Çò) ‚àò value ‚àò out) {xs = filter _ (utxo l)} out‚àà
... | u‚àà‚Ä≤ , threadToken‚â°
  with ‚àà-filter‚Åª ((ùïç ‚âü‚Ñï_) ‚àò address ‚àò out) {xs = utxo l} u‚àà‚Ä≤
... | u‚àà , refl
  with ‚ààutxo‚áíoutRef‚â° {u = u} {l = l} u‚àà
... | prev‚àà , prevOut‚àà , refl
    = prevTx , v , prevOut‚àà , u‚àà , prev‚àà , ‚àà-map‚Å∫ outRef u‚àà , spent‚â° , threadToken‚â°
  where
    oRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚àà)
    o    = record { address = ùïç; datumHash = toData s ‚ôØ·µà; value = v }
    u‚Ä≤   = record { prevTx = prevTx; out = o; outRef = oRef }

    spent‚â° : getSpentOutputRef l oRef ‚â° just o
    spent‚â° = utxo-getSpent {l = l} {u = u‚Ä≤} u‚àà

Satisfiable : ‚àÄ {s l} {vl : ValidLedger l}
  ‚Üí TxConstraints
  ‚Üí vl ~ s
  ‚Üí Set
Satisfiable {l = l} {vl} tx‚â° vl~s
  with view-~ {vl = vl} vl~s
... | _ , v , _
    = (range‚â° tx‚â° >>=‚Çú (_‚àã length l) ‚â° true)
    √ó (spent‚â• tx‚â° >>=‚Çú (v ‚â•·∂ú_) ‚â° true)
    √ó (‚àÄ tx ‚Üí
        All {A = MonetaryPolicy}
            (Œª f ‚Üí T (f (toPendingMPS l tx (f ‚ôØ))))
            (maybe (map proj‚ÇÅ) [] (forge‚â° tx‚â°)))

mkTx : ‚àÄ {l} {s s‚Ä≤ : S} {i : I} {vl : ValidLedger l} {vl~s : vl ~ s}
  ‚Üí (tx‚â° : TxConstraints)
  ‚Üí Satisfiable {vl = vl} tx‚â° vl~s
  ‚Üí Œ£[ tx ‚àà Tx ] (verifyTx l tx tx‚â° ‚â° true)
mkTx {l} {s} {s‚Ä≤} {i} {vl} {vl~s} tx‚â° (r‚â° , s‚â• , _)
  with view-~ {vl = vl} vl~s
... | prevTx , v , prevOut‚àà , _ , _ , _ , getSpent‚â° , _
    = tx , verify‚â°
    where
      frg = maybe toValue $0 (forge‚â° tx‚â°)
      rng = fromMaybe (-‚àû ‚ãØ +‚àû) (range‚â° tx‚â°)
      plc = maybe (map proj‚ÇÅ) [] (forge‚â° tx‚â°)

      i‚ÇÄ = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚àà) ‚Üê‚Äî (i , s)

      tx = record { inputs   = [ i‚ÇÄ ]
                  ; outputs  = [ s‚Ä≤ ‚Äî‚Üí (frg +·∂ú v) ]
                  ; policies = plc
                  ; forge    = frg
                  ; range    = rng
                  ; datumWitnesses = [ toData s‚Ä≤ ‚ôØ·µà , toData s‚Ä≤ ] }

      txi = mkTxInfo l tx

      frgT : (forge‚â° tx‚â° >>=‚Çú Œª v ‚Üí ‚åä TxInfo.forge txi ‚âü·∂ú toValue v ‚åã) ‚â° true
      frgT with forge‚â° tx‚â°
      ... | nothing = refl
      ... | just v  rewrite ‚âü-refl _‚âü·∂ú_ (toValue v) = refl

      rngT : (range‚â° tx‚â° >>=‚Çú Œª r ‚Üí ‚åä TxInfo.range txi ‚âüÀ¢ r ‚åã) ‚â° true
      rngT with range‚â° tx‚â°
      ... | nothing = refl
      ... | just v  rewrite ‚âü-refl _‚âüÀ¢_ v = refl

      v‚â° : valueSpent txi ‚â° v
      v‚â° rewrite sum-single {v = InputInfo.value (mkInputInfo l i‚ÇÄ)}
               | getSpent‚â°
               = refl

      spT  : (spent‚â• tx‚â° >>=‚Çú (valueSpent txi ‚â•·∂ú_)) ‚â° true
      spT rewrite v‚â° = s‚â•

      verify‚â° : verifyTx l tx tx‚â° ‚â° true
      verify‚â° rewrite frgT | rngT | spT = refl
