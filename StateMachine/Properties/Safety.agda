module StateMachine.Properties.Safety where

open import Data.Unit    using (tt)
open import Data.Bool    using (Bool; T; true; false; if_then_else_)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ-syntax)
open import Data.Maybe   using (Maybe; nothing; Is-just; _>>=_; fromMaybe)
  renaming (just to pure; ap to _<*>_)
open import Data.Nat     using (‚Ñï; _<_; zero; suc; ‚â§-pred)
  renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Fin     using (to‚Ñï; from‚Ñï<)
open import Data.List    using (List; []; _‚à∑_; [_]; map; length)

open import Data.Maybe.Properties using (just-injective)

open import Data.List.Membership.Propositional  using (_‚àà_; mapWith‚àà; find)
open import Data.List.Relation.Unary.Any as Any using (Any; here; there)

open import Relation.Nullary using (yes; no)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; cong; sym; trans; inspect)
  renaming ([_] to ‚â°[_])
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)

open import Prelude.Lists

open import UTxO.Hashing.Base
open import UTxO.Hashing.Types
open import UTxO.Hashing.MetaHash
open import UTxO.Types hiding (I)
open import StateMachine.Base

open PendingTxInput
open PendingTxOutput
open PendingTx

safety : ‚àÄ {S I : Set} {{_ : IsData S}} {{_ : IsData I}} {sm : StateMachine S I}
           {s : S} {i : I} {s‚Ä≤ : S} {l : Ledger}
           {prevTx : Tx} {v : Value}

  ‚Üí ValidLedger l

  ‚Üí (prevTxRef‚àà : record { address = (mkValidator sm) ‚ôØ
                         ; value   = v
                         ; dataVal = toData s
                         } ‚àà outputs prevTx)

  ‚Üí record { inputs  = [ record { outputRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at (to‚Ñï (Any.index prevTxRef‚àà))
                                ; validator = mkValidator sm
                                ; redeemer  = toData i } ]
           ; outputs = [ record { address = (mkValidator sm) ‚ôØ
                                ; value = v
                                ; dataVal = toData s‚Ä≤ } ]
           ; fee     = $ 0
           ; forge   = $ 0
           ; range   = -‚àû ‚ãØ +‚àû
           } ‚àà l

    ---------------------------------------------------------------------------------------

  ‚Üí step sm s i ‚â° pure s‚Ä≤

safety {S = S} {sm = sm@(SM[ _ , final , step‚Ä≤ ])} {s} {i} {s‚Ä≤} {l} {prevTx} {v} vl prevTxRef‚àà tx‚ààl = fin
  where
    ds  = toData s
    di  = toData i
    ds‚Ä≤ = toData s‚Ä≤
    ùïç = (mkValidator sm) ‚ôØ

    prevOut : TxOutput
    address prevOut = ùïç
    value   prevOut = v
    dataVal prevOut = ds

    prevTxRef : TxOutputRef
    prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at (to‚Ñï (Any.index prevTxRef‚àà))

    txIn : TxInput
    outputRef txIn = prevTxRef
    validator txIn = mkValidator sm
    redeemer  txIn = di

    txOut : TxOutput
    address txOut = ùïç
    value   txOut = v
    dataVal txOut = ds‚Ä≤

    tx : Tx
    inputs tx  = [ txIn ]
    outputs tx = [ txOut ]
    fee     tx = $ 0
    forge   tx = $ 0
    range   tx = -‚àû ‚ãØ +‚àû

    ‚àà‚áívalid : ‚àÄ {tx l}
      ‚Üí tx ‚àà l
      ‚Üí ValidLedger l
      ‚Üí ‚àÉ[ l‚Ä≤ ] IsValidTx tx l‚Ä≤
    ‚àà‚áívalid (here refl) (vl ‚äï t ‚à∂- vtx) = _ , vtx
    ‚àà‚áívalid (there tx‚àà) (vl ‚äï t ‚à∂- vtx) = ‚àà‚áívalid tx‚àà vl

    ‚àÉl‚Ä≤ : ‚àÉ[ l‚Ä≤ ] IsValidTx tx l‚Ä≤
    ‚àÉl‚Ä≤ = ‚àà‚áívalid tx‚ààl vl

    l‚Ä≤ : Ledger
    l‚Ä≤ = proj‚ÇÅ ‚àÉl‚Ä≤

    vtx : IsValidTx tx l‚Ä≤
    vtx = proj‚ÇÇ ‚àÉl‚Ä≤

    i‚àà : txIn ‚àà inputs tx
    i‚àà = here refl

    v‚ÇÅ = validTxRefs vtx
    v‚ÇÇ = validOutputIndices vtx

    ‚àÉtx‚â°id : Any (Œª tx‚Ä≤ ‚Üí tx‚Ä≤ ‚ôØ‚Çú‚Çì ‚â° id prevTxRef) l‚Ä≤
    ‚àÉtx‚â°id = v‚ÇÅ txIn i‚àà

    proj‚ÇÅ‚àòfind‚àò‚ôØ : ‚àÄ {l : Ledger} {tx‚ÇÇ : Tx}
      ‚Üí (any‚â° : Any (Œª tx‚ÇÅ ‚Üí tx‚ÇÅ ‚ôØ‚Çú‚Çì ‚â° tx‚ÇÇ ‚ôØ‚Çú‚Çì) l)
      ‚Üí proj‚ÇÅ (find any‚â°)
      ‚â° tx‚ÇÇ
    proj‚ÇÅ‚àòfind‚àò‚ôØ (here px)  = injective‚ôØ‚Çú‚Çì px
    proj‚ÇÅ‚àòfind‚àò‚ôØ (there x‚àà) = proj‚ÇÅ‚àòfind‚àò‚ôØ x‚àà

    lookupPrevTx‚â° : lookupTx l‚Ä≤ prevTxRef ‚àÉtx‚â°id
                  ‚â° prevTx
    lookupPrevTx‚â° = proj‚ÇÅ‚àòfind‚àò‚ôØ ‚àÉtx‚â°id

    len<‚Ä≤ : index prevTxRef < length (outputs (lookupTx l‚Ä≤ prevTxRef ‚àÉtx‚â°id))
    len<‚Ä≤ = v‚ÇÇ txIn i‚àà

    len< : index prevTxRef < length (outputs prevTx)
    len< = to‚Ñï< (Any.index prevTxRef‚àà)

    lookupOutput‚â° : lookupOutput l‚Ä≤ (outputRef txIn) ‚àÉtx‚â°id len<‚Ä≤
                  ‚â° prevOut
    lookupOutput‚â° = trans h‚ÇÅ h‚ÇÇ
      where
        h‚ÇÅ : (outputs (lookupTx l‚Ä≤ prevTxRef ‚àÉtx‚â°id) ‚Äº (from‚Ñï< len<‚Ä≤))
           ‚â° (outputs prevTx ‚Äº (from‚Ñï< len<))
        h‚ÇÅ = ‚Äº-from‚Ñï<-‚â° len<‚Ä≤ len< (cong outputs lookupPrevTx‚â°)

        h‚ÇÇ : (outputs prevTx ‚Äº (from‚Ñï< len<))
           ‚â° prevOut
        h‚ÇÇ rewrite ‚Äº-from‚Ñï<‚àòto‚Ñï< {xs = outputs prevTx} (Any.index prevTxRef‚àà)
                 | ‚Äº-index prevTxRef‚àà
                 = refl

    ptxIn : PendingTxInput
    validatorHash ptxIn = ùïç
    dataHash      ptxIn = ds ‚ôØ·µà
    redeemerHash  ptxIn = di ‚ôØ·µà
    value         ptxIn = v

    ptxIn‚â° : mkPendingTxIn l‚Ä≤ txIn ‚àÉtx‚â°id len<‚Ä≤
           ‚â° ptxIn
    ptxIn‚â° = h
      where
        h : record { validatorHash = ùïç
                   ; dataHash      = (dataVal (lookupOutput l‚Ä≤ prevTxRef ‚àÉtx‚â°id len<‚Ä≤)) ‚ôØ·µà
                   ; redeemerHash  = di ‚ôØ·µà
                   ; value         = value (lookupOutput l‚Ä≤ prevTxRef ‚àÉtx‚â°id len<‚Ä≤) }
          ‚â° ptxIn
        h rewrite lookupOutput‚â° = refl

    ptxOut : PendingTxOutput
    value         ptxOut = v
    validatorHash ptxOut = ùïç
    dataHash      ptxOut = ds‚Ä≤ ‚ôØ·µà

    ptx : PendingTx
    inputInfo     ptx = [ ptxIn ]
    thisInput     ptx = ptxIn
    outputInfo    ptx = [ ptxOut ]
    dataWitnesses ptx = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
    txHash        ptx = tx ‚ôØ‚Çú‚Çì
    fee           ptx = $ 0
    forge         ptx = $ 0
    range         ptx = -‚àû ‚ãØ +‚àû

    ptx‚â° : mkPendingTx l‚Ä≤ tx txIn i‚àà v‚ÇÅ v‚ÇÇ
         ‚â° ptx
    ptx‚â° = h
      where
        h : record { inputInfo     = [ mkPendingTxIn l‚Ä≤ txIn ‚àÉtx‚â°id len<‚Ä≤ ]
                   ; thisInput     = mkPendingTxIn l‚Ä≤ txIn ‚àÉtx‚â°id len<‚Ä≤
                   ; outputInfo    = [ ptxOut ]
                   ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                   ; txHash        = tx ‚ôØ‚Çú‚Çì
                   ; fee           = $ 0
                   ; forge         = $ 0
                   ; range         = -‚àû ‚ãØ +‚àû }
          ‚â° ptx
        h rewrite ptxIn‚â° = refl

    validate‚â° :
         T (runValidation (mkPendingTx l‚Ä≤ tx txIn i‚àà v‚ÇÅ v‚ÇÇ) txIn (lookupOutput l‚Ä≤ (outputRef txIn) ‚àÉtx‚â°id len<‚Ä≤))
       ‚Üí T (mkValidator sm ptx di ds)
    validate‚â° p rewrite ptx‚â° | lookupOutput‚â° = p

    fromMaybe‚â°true : ‚àÄ {S : Set} {mx : Maybe S} {k : S ‚Üí Maybe Bool}
      ‚Üí T (fromMaybe false (mx >>= k))
      ‚Üí ‚àÉ[ x ] ( (mx  ‚â° pure x)
               √ó (k x ‚â° pure true) )
    fromMaybe‚â°true {mx = mx} {k = k} p
      with mx | p
    ... | nothing | ()
    ... | pure x  | p‚Ä≤
      with k x | inspect k x | p‚Ä≤
    ... | nothing    | _       | ()
    ... | pure false | _       | ()
    ... | pure true  | ‚â°[ k‚â° ] | _  = x , refl , k‚â°

    k‚Ä≤ : S ‚Üí Maybe Bool
    k‚Ä≤ x =
      if final x then
        pure false
      else
        pure (toData s‚Ä≤ == toData x)

    mx‚Ä≤ : Maybe S
    mx‚Ä≤ with ‚¶á step‚Ä≤ (fromData ds) (fromData di) ‚¶à
    ... | pure r = r
    ... | _      = nothing

    mx‚â°‚Ä≤ : ‚àÄ {s‚Ä≥ : S}
      ‚Üí mx‚Ä≤ ‚â° pure s‚Ä≥
      ‚Üí step‚Ä≤ s i ‚â° pure s‚Ä≥
    mx‚â°‚Ä≤ {s‚Ä≥} mx‚â°
      rewrite from‚àòto s | from‚àòto i
      with step‚Ä≤ s i | mx‚â°
    ... | nothing  | ()
    ... | pure .s‚Ä≥ | refl = refl

    hh : T (mkValidator sm ptx di ds)
       ‚Üí T (fromMaybe false (mx‚Ä≤ >>= k‚Ä≤))
    hh p rewrite from‚àòto s | from‚àòto i | ‚âü‚Ñï-refl {ùïç} | ‚âü‚Ñï-refl {ds‚Ä≤ ‚ôØ·µà} = p

    step‚â° : T (mkValidator sm ptx di ds)
          ‚Üí step‚Ä≤ s i ‚â° pure s‚Ä≤
    step‚â° p
      with fromMaybe‚â°true {mx = mx‚Ä≤} {k = k‚Ä≤} (hh p)
    ... | s‚Ä≥ , mx‚â° , k‚â°
      with final s‚Ä≥ | k‚â°
    ... | true  | ()
    ... | false | k‚â°‚Ä≤
      with toData s‚Ä≤ ‚âü·µà toData s‚Ä≥ | k‚â°‚Ä≤
    ... | no _   | ()
    ... | yes eq | _
      with cong (fromData {A = S}) eq
    ... | eq‚Ä≤
      rewrite from‚àòto s‚Ä≥ | from‚àòto s‚Ä≤ =
        begin
          step‚Ä≤ s i
        ‚â°‚ü® mx‚â°‚Ä≤ mx‚â° ‚ü©
           pure s‚Ä≥
        ‚â°‚ü® sym eq‚Ä≤ ‚ü©
           pure s‚Ä≤
        ‚àé

    fin : step sm s i ‚â° pure s‚Ä≤
    fin = step‚â° (validate‚â° (allInputsValidate vtx txIn i‚àà))
