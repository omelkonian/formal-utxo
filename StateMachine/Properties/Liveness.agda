module StateMachine.Properties.Liveness where

open import Function using (_‚àò_; case_of_)

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.Unit    using (‚ä§; tt)
open import Data.Bool    using (Bool; T; true; false; if_then_else_)
open import Data.Product using (_√ó_; _,_; ‚àÉ; ‚àÉ-syntax; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum     using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe   using (Maybe)
  renaming (just to pure; ap to _<*>_) -- to use idiom brackets
open import Data.Fin     using (Fin; to‚Ñï; from‚Ñï<)
  renaming (suc to fsuc; zero to fzero)
open import Data.Nat     using (‚Ñï; _<_; z‚â§n; s‚â§s)
  renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.List    using (List; []; _‚à∑_; [_]; map; length; filter; null)

open import Data.List.Relation.Unary.Any as Any using (Any; here; there)
open import Data.List.Membership.Propositional  using (_‚àà_; find; mapWith‚àà)
open import Data.List.Membership.Propositional.Properties  using (find‚àòmap)
open import Data.List.Relation.Unary.AllPairs   using ([]; _‚à∑_)
open import Data.List.Relation.Unary.All        using ([]; _‚à∑_)

open import Relation.Nullary                            using (¬¨_; yes; no)
open import Relation.Nullary.Decidable                  using (‚åä_‚åã)
open import Relation.Binary                             using (Decidable)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; cong; sym; inspect)
  renaming ([_] to ‚â°[_])
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)

open import Prelude.Lists

open import UTxO.Hashing.Base
open import UTxO.Hashing.Types
open import UTxO.Hashing.MetaHash
open import UTxO.Types hiding (I)
open import StateMachine.Base

Address = HashId

open import UTxO.Ledger      Address (Œª x ‚Üí x) _‚âü‚Ñï_
open import UTxO.TxUtilities Address (Œª x ‚Üí x) _‚âü‚Ñï_
open import UTxO.Hashing.Tx  Address (Œª x ‚Üí x) _‚âü‚Ñï_
open import UTxO.Validity    Address (Œª x ‚Üí x) _‚âü‚Ñï_

liveness : ‚àÄ {S I : Set} {{_ : IsData S}} {{_ : IsData I}} {sm : StateMachine S I}
             {s : S} {i : I} {s‚Ä≤ : S} {l : Ledger}
             {prevTx : Tx} {v : Value}

    -- `s ‚Äî‚Üí[i] s‚Ä≤` constitutes a valid transition in the state machine
  ‚Üí step sm s i ‚â° pure s‚Ä≤

    -- if we are moving to a final state, make sure no value is carried around
  ‚Üí (T (isFinal sm s‚Ä≤) ‚Üí v ‚â° 0)

    -- existing ledger is valid
  ‚Üí (vl : ValidLedger l)

    -- previous output is an element of previous transaction
  ‚Üí (prevOut‚ààprevTx : record {value = v; address = (mkValidator sm) ‚ôØ; dataVal = toData s} ‚àà outputs prevTx)

  ‚Üí let prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx) in

    -- previous unspent output
    prevTxRef ‚àà SET‚Çí.list (unspentOutputs l)

    ---------------------------------------------------------------------------------------

  ‚Üí ‚àÉ[ tx ]
       ( -- (1) new transaction is valid
         IsValidTx tx l
         -- (2) it contains the source state in its inputs, using the state machine's validator
       √ó Any (Œª i ‚Üí (outputRef i ‚â° prevTxRef) √ó ((validator i) ‚ôØ ‚â° (mkValidator sm) ‚ôØ)) (inputs tx)
         -- (3) it contains the target state in its outputs
       √ó (¬¨ T (isFinal sm s‚Ä≤) ‚Üí Any ((_‚â° pure s‚Ä≤) ‚àò fromData ‚àò dataVal) (outputs tx))
       )

liveness {S} {I} {sm} {s} {i} {s‚Ä≤} {l} {prevTx} {v} step‚â° val‚â° vl prevOut‚ààprevTx prev‚ààutxo
  with isFinal sm s‚Ä≤ | inspect (isFinal sm) s‚Ä≤
... | true | ‚â°[ final‚â° ] = tx , vtx , here (refl , refl) , Œª ¬¨fin ‚Üí ‚ä•-elim (¬¨fin tt)
  where
    ùïç  = (mkValidator sm) ‚ôØ

    -- Create a transaction input.
    _at_‚Üê‚Äî_ : Tx ‚Üí ‚Ñï ‚Üí I ‚Üí TxInput
    outputRef (t at i ‚Üê‚Äî _) = (t ‚ôØ‚Çú‚Çì) indexed-at i
    redeemer  (_ at _ ‚Üê‚Äî d) = toData d
    validator (_ at _ ‚Üê‚Äî _) = mkValidator sm

    -- Create a transaction output.
    _‚Äî‚Üí_at_ : S ‚Üí Value ‚Üí Address ‚Üí TxOutput
    value   (_ ‚Äî‚Üí v at _) = v
    address (_ ‚Äî‚Üí _ at a) = a
    dataVal (d ‚Äî‚Üí _ at _) = toData d

    prevTxRef : TxOutputRef
    prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx)

    j = index prevTxRef

    prevOut : TxOutput
    prevOut = record {value = v; address = ùïç; dataVal = toData s}

    tx : Tx
    inputs  tx = [ prevTx at j ‚Üê‚Äî i ]
    outputs tx = []
    forge   tx = $0
    fee     tx = $0

    prevTx‚àà : prevTx ‚àà l
    prevTx‚àà = tx‚ôØ‚àà‚áítx‚àà prev‚ààutxo

    prevTx‚ôØ‚àà : Any (Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì) l
    prevTx‚ôØ‚àà = Any.map (cong _‚ôØ‚Çú‚Çì ‚àò sym) prevTx‚àà

    prevTx‚Ä≤ = lookupTx l prevTxRef prevTx‚ôØ‚àà

    lookupPrevTx‚â° : lookupTx l prevTxRef prevTx‚ôØ‚àà ‚â° prevTx
    lookupPrevTx‚â°
      rewrite find‚àòmap {Q = Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì} prevTx‚àà (cong _‚ôØ‚Çú‚Çì ‚àò sym)
            | proj‚ÇÅ‚àòfind prevTx‚àà
            = refl

    len<‚Ä≤ : index prevTxRef < length (outputs prevTx)
    len<‚Ä≤ = to‚Ñï< (Any.index prevOut‚ààprevTx)

    len< : index prevTxRef < length (outputs prevTx‚Ä≤)
    len< rewrite lookupPrevTx‚â° = len<‚Ä≤

    lookupPrevOutput‚â° : lookupOutput l prevTxRef prevTx‚ôØ‚àà len< ‚â° prevOut
    lookupPrevOutput‚â°
      rewrite lookupPrevTx‚â°
            | ‚Äº-from‚Ñï<‚àòto‚Ñï< {xs = outputs prevTx} (Any.index prevOut‚ààprevTx)
            | ‚Äº-index prevOut‚ààprevTx
            = refl

    lookupValue‚â° : lookupValue l (prevTx at j ‚Üê‚Äî i) prevTx‚ôØ‚àà len< ‚â° v
    lookupValue‚â° rewrite lookupPrevOutput‚â° = refl

    addr‚â°‚Ä≤ : address (lookupOutput l prevTxRef prevTx‚ôØ‚àà len<) ‚â° ùïç
    addr‚â°‚Ä≤ rewrite lookupPrevOutput‚â° = refl

    v‚ÇÄ :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        Any (Œª t ‚Üí t ‚ôØ‚Çú‚Çì ‚â° id (outputRef i)) l
    v‚ÇÄ _ (here refl) = prevTx‚ôØ‚àà
    v‚ÇÄ _ (there ())

    v‚ÇÅ :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÄ i i‚àà)))
    v‚ÇÅ _ (here refl) = len<
    v‚ÇÅ _ (there ())

    i‚Ä≤ = prevTx at j ‚Üê‚Äî i
    out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
    ptx = mkPendingTx l tx i‚Ä≤ (here refl) v‚ÇÄ v‚ÇÅ

    ds  = toData s
    di  = toData i
    ds‚Ä≤ = toData s‚Ä≤

    ptxIn : PendingTxInput
    ptxIn = record { validatorHash = ùïç
                   ; dataHash      = ds ‚ôØ·µà
                   ; redeemerHash  = di ‚ôØ·µà
                   ; value         = v }

    dataVal‚â° : dataVal out ‚â° ds
    dataVal‚â° rewrite lookupPrevOutput‚â° = refl

    value‚â° : value out ‚â° v
    value‚â° rewrite lookupPrevOutput‚â° = refl

    ptxIn‚â° : mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
            ‚â° ptxIn
    ptxIn‚â° =
        -- rewrite dataVal‚â° | value‚â° = refl
        begin
        mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
        ‚â°‚ü®‚ü©
        record { validatorHash = ùïç
                ; dataHash      = (dataVal out) ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
        ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = x ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = value out
                            }) dataVal‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
        ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = ds ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = x
                            }) value‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = v
                }
        ‚â°‚ü®‚ü©
        ptxIn
        ‚àé

    ptxIn‚â°‚Ä≤ : mapWith‚àà (inputs tx) (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
            ‚â° [ ptxIn ]
    ptxIn‚â°‚Ä≤ rewrite ptxIn‚â° = refl

    ptx‚â° : ptx ‚â° record { inputInfo     = [ ptxIn ]
                        ; thisInput     = ptxIn
                        ; outputInfo    = []
                        ; dataWitnesses = []
                        ; txHash        = tx ‚ôØ‚Çú‚Çì
                        ; fee           = $0
                        ; forge         = $0 }
    ptx‚â° =
        -- rewrite ptxIn‚â°‚Ä≤ | ptxIn‚â° = refl
      begin
        ptx
      ‚â°‚ü®‚ü©
        record { inputInfo      = mapWith‚àà [ i‚Ä≤ ] (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
                ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                ; outputInfo    = []
                ; dataWitnesses = []
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = x
                            ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                            ; outputInfo    = []
                            ; dataWitnesses = []
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â°‚Ä≤ ‚ü©
        record { inputInfo     = [ ptxIn ]
               ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
               ; outputInfo    = []
               ; dataWitnesses = []
               ; txHash        = tx ‚ôØ‚Çú‚Çì
               ; fee           = $0
               ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = [ ptxIn ]
                            ; thisInput     = x
                            ; outputInfo    = []
                            ; dataWitnesses = []
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â° ‚ü©
        record { inputInfo     = [ ptxIn ]
               ; thisInput     = ptxIn
               ; outputInfo    = []
               ; dataWitnesses = []
               ; txHash        = tx ‚ôØ‚Çú‚Çì
               ; fee           = $0
               ; forge         = $0 }
      ‚àé

    state‚Ä≤‚â° : ‚¶á step (pure sm) (fromData ds) (fromData di) ‚¶à ‚â° pure (pure s‚Ä≤)
    state‚Ä≤‚â° rewrite from‚àòto s | from‚àòto i | step‚â° = refl

    validate‚â° : mkValidator sm ptx di ds ‚â° true
    validate‚â°
      rewrite state‚Ä≤‚â°
            | final‚â°
            = refl

    v‚ÇÉ :
      forge tx +·∂ú sum·∂ú [ lookupValue l (prevTx at j ‚Üê‚Äî i) prevTx‚ôØ‚àà len< ]
        ‚â°
      fee tx +·∂ú sum·∂ú (map value [])
    v‚ÇÉ rewrite lookupValue‚â° | final‚â° | val‚â° tt = refl

    val :
      let
        i   = prevTx at j ‚Üê‚Äî i
        out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
        ptx = mkPendingTx l tx i (here refl) v‚ÇÄ v‚ÇÅ
      in
       T (runValidation ptx i out)
    val rewrite lookupPrevOutput‚â° | validate‚â° = tt

    vtx : IsValidTx tx l
    validTxRefs         vtx = v‚ÇÄ
    validOutputIndices  vtx = v‚ÇÅ
    validOutputRefs     vtx = Œª{ i (here refl) ‚Üí prev‚ààutxo
                               ; _ (there ()) }
    preservesValues     vtx = v‚ÇÉ
    noDoubleSpending    vtx = [] ‚à∑ []
    allInputsValidate   vtx = Œª{ i (here refl) ‚Üí val
                               ; _ (there ()) }
    validateValidHashes vtx = Œª{ i (here refl) ‚Üí addr‚â°‚Ä≤
                               ; _ (there ()) }

... | false | ‚â°[ final‚â° ] = tx , vtx , here (refl , refl) , Œª _ ‚Üí here (from‚àòto s‚Ä≤)
  where
    ùïç  = (mkValidator sm) ‚ôØ

    -- Create a transaction input.
    _at_‚Üê‚Äî_ : Tx ‚Üí ‚Ñï ‚Üí I ‚Üí TxInput
    outputRef (t at i ‚Üê‚Äî _) = (t ‚ôØ‚Çú‚Çì) indexed-at i
    redeemer  (_ at _ ‚Üê‚Äî d) = toData d
    validator (_ at _ ‚Üê‚Äî _) = mkValidator sm

    -- Create a transaction output.
    _‚Äî‚Üí_at_ : S ‚Üí Value ‚Üí Address ‚Üí TxOutput
    value   (_ ‚Äî‚Üí v at _) = v
    address (_ ‚Äî‚Üí _ at a) = a
    dataVal (d ‚Äî‚Üí _ at _) = toData d

    prevTxRef : TxOutputRef
    prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx)

    j = index prevTxRef

    prevOut : TxOutput
    prevOut = record {value = v; address = ùïç; dataVal = toData s}

    tx : Tx
    inputs  tx = [ prevTx at j ‚Üê‚Äî i ]
    outputs tx = [ s‚Ä≤ ‚Äî‚Üí $ v at ùïç ]
    forge   tx = $0
    fee     tx = $0

    prevTx‚àà : prevTx ‚àà l
    prevTx‚àà = tx‚ôØ‚àà‚áítx‚àà prev‚ààutxo

    prevTx‚ôØ‚àà : Any (Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì) l
    prevTx‚ôØ‚àà = Any.map (cong _‚ôØ‚Çú‚Çì ‚àò sym) prevTx‚àà

    prevTx‚Ä≤ = lookupTx l prevTxRef prevTx‚ôØ‚àà

    lookupPrevTx‚â° : lookupTx l prevTxRef prevTx‚ôØ‚àà ‚â° prevTx
    lookupPrevTx‚â°
      rewrite find‚àòmap {Q = Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì} prevTx‚àà (cong _‚ôØ‚Çú‚Çì ‚àò sym)
            | proj‚ÇÅ‚àòfind prevTx‚àà
            = refl

    len<‚Ä≤ : index prevTxRef < length (outputs prevTx)
    len<‚Ä≤ = to‚Ñï< (Any.index prevOut‚ààprevTx)

    len< : index prevTxRef < length (outputs prevTx‚Ä≤)
    len< rewrite lookupPrevTx‚â° = len<‚Ä≤

    lookupPrevOutput‚â° : lookupOutput l prevTxRef prevTx‚ôØ‚àà len< ‚â° prevOut
    lookupPrevOutput‚â°
      rewrite lookupPrevTx‚â°
            | ‚Äº-from‚Ñï<‚àòto‚Ñï< {xs = outputs prevTx} (Any.index prevOut‚ààprevTx)
            | ‚Äº-index prevOut‚ààprevTx
            = refl

    lookupValue‚â° : lookupValue l (prevTx at j ‚Üê‚Äî i) prevTx‚ôØ‚àà len< ‚â° v
    lookupValue‚â° rewrite lookupPrevOutput‚â° = refl

    addr‚â°‚Ä≤ : address (lookupOutput l prevTxRef prevTx‚ôØ‚àà len<) ‚â° ùïç
    addr‚â°‚Ä≤ rewrite lookupPrevOutput‚â° = refl

    v‚ÇÄ :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        Any (Œª t ‚Üí t ‚ôØ‚Çú‚Çì ‚â° id (outputRef i)) l
    v‚ÇÄ _ (here refl) = prevTx‚ôØ‚àà
    v‚ÇÄ _ (there ())

    v‚ÇÅ :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÄ i i‚àà)))
    v‚ÇÅ _ (here refl) = len<
    v‚ÇÅ _ (there ())

    i‚Ä≤ = prevTx at j ‚Üê‚Äî i
    out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
    ptx = mkPendingTx l tx i‚Ä≤ (here refl) v‚ÇÄ v‚ÇÅ

    ds  = toData s
    di  = toData i
    ds‚Ä≤ = toData s‚Ä≤

    ptxIn : PendingTxInput
    ptxIn = record { validatorHash = ùïç
                    ; dataHash      = ds ‚ôØ·µà
                    ; redeemerHash  = di ‚ôØ·µà
                    ; value         = v }

    dataVal‚â° : dataVal out ‚â° ds
    dataVal‚â° rewrite lookupPrevOutput‚â° = refl

    value‚â° : value out ‚â° v
    value‚â° rewrite lookupPrevOutput‚â° = refl

    ptxIn‚â° : mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
            ‚â° ptxIn
    ptxIn‚â° =
        -- rewrite dataVal‚â° | value‚â° = refl
      begin
        mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
      ‚â°‚ü®‚ü©
        record { validatorHash = ùïç
                ; dataHash      = (dataVal out) ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
      ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = x ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = value out
                            }) dataVal‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
      ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = ds ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = x
                            }) value‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = v
                }
      ‚â°‚ü®‚ü©
        ptxIn
        ‚àé

    ptxIn‚â°‚Ä≤ : mapWith‚àà (inputs tx) (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
            ‚â° [ ptxIn ]
    ptxIn‚â°‚Ä≤ rewrite ptxIn‚â° = refl

    ptxOut : PendingTxOutput
    ptxOut = record {value = v; validatorHash = ùïç; dataHash = ds‚Ä≤ ‚ôØ·µà}

    ptx‚â° : ptx ‚â° record { inputInfo     = [ ptxIn ]
                        ; thisInput     = ptxIn
                        ; outputInfo    = [ ptxOut ]
                        ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                        ; txHash        = tx ‚ôØ‚Çú‚Çì
                        ; fee           = $0
                        ; forge         = $0 }
    ptx‚â° =
        -- rewrite ptxOut‚â° | ptxIn‚â°‚Ä≤ | ptxIn‚â° = refl
      begin
        ptx
      ‚â°‚ü®‚ü©
        record { inputInfo     = mapWith‚àà [ i‚Ä≤ ] (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
                ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = x
                            ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                            ; outputInfo    = [ ptxOut ]
                            ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â°‚Ä≤ ‚ü©
        record { inputInfo     = [ ptxIn ]
                ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = [ ptxIn ]
                            ; thisInput     = x
                            ; outputInfo    = [ ptxOut ]
                            ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â° ‚ü©
        record { inputInfo     = [ ptxIn ]
                ; thisInput     = ptxIn
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚àé

    state‚Ä≤‚â° : ‚¶á step (pure sm) (fromData ds) (fromData di) ‚¶à ‚â° pure (pure s‚Ä≤)
    state‚Ä≤‚â° rewrite from‚àòto s | from‚àòto i | step‚â° = refl

    outs‚â° : getContinuingOutputs ptx ‚â° [ ptxOut ]
    outs‚â° rewrite ‚âü‚Ñï-refl {ùïç} = refl

    findData‚â° : findData (PendingTxOutput.dataHash ptxOut) ptx ‚â° pure ds‚Ä≤
    findData‚â° rewrite ‚âü‚Ñï-refl {ds‚Ä≤ ‚ôØ·µà} = refl

    validate‚â° : mkValidator sm ptx di ds ‚â° true
    validate‚â°
      rewrite state‚Ä≤‚â°
            | outs‚â°
            | findData‚â°
            | ‚âü·µà-refl {ds‚Ä≤}
            | final‚â°
            = refl

    val :
      let
        i   = prevTx at j ‚Üê‚Äî i
        out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
        ptx = mkPendingTx l tx i (here refl) v‚ÇÄ v‚ÇÅ
      in
       T (runValidation ptx i out)
    val rewrite lookupPrevOutput‚â° | validate‚â° = tt

    vtx : IsValidTx tx l
    validTxRefs         vtx = v‚ÇÄ
    validOutputIndices  vtx = v‚ÇÅ
    validOutputRefs     vtx = Œª{ i (here refl) ‚Üí prev‚ààutxo
                               ; _ (there ()) }
    preservesValues     vtx rewrite lookupValue‚â° = refl
    noDoubleSpending    vtx = [] ‚à∑ []
    allInputsValidate   vtx = Œª{ i (here refl) ‚Üí val
                               ; _ (there ()) }
    validateValidHashes vtx = Œª{ i (here refl) ‚Üí addr‚â°‚Ä≤
                               ; _ (there ()) }

liveness‚Ä≤ : ‚àÄ {S I : Set} {{_ : IsData S}} {{_ : IsData I}} {sm : StateMachine S I}
              {s : S} {i : I} {s‚Ä≤ : S} {l : Ledger}
              {prevTx : Tx} {v : Value}

    -- `s ‚Äî‚Üí[i] s‚Ä≤` constitutes a valid transition in the state machine
  ‚Üí step sm s i ‚â° pure s‚Ä≤

    -- we are not moving to a final state
  ‚Üí isFinal sm s‚Ä≤ ‚â° false

    -- existing ledger is valid
  ‚Üí (vl : ValidLedger l)

    -- previous output is an element of previous transaction
  ‚Üí (prevOut‚ààprevTx : record {value = v; address = (mkValidator sm) ‚ôØ; dataVal = toData s} ‚àà outputs prevTx)

  ‚Üí let prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx) in

    -- previous unspent output
    prevTxRef ‚àà SET‚Çí.list (unspentOutputs l)

    ---------------------------------------------------------------------------------------

  ‚Üí ‚àÉ[ tx ]
       ( -- (1) new transaction is valid
         IsValidTx tx l
         -- (2) it contains the source state in its inputs, using the state machine's validator
       √ó Any (Œª i ‚Üí (outputRef i ‚â° prevTxRef) √ó ((validator i) ‚ôØ ‚â° (mkValidator sm) ‚ôØ)) (inputs tx)
         -- (3) it contains the target state in its outputs
       √ó Any ((_‚â° pure s‚Ä≤) ‚àò fromData ‚àò dataVal) (outputs tx)
       )

liveness‚Ä≤ {S} {I} {sm} {s} {i} {s‚Ä≤} {l} {prevTx} {v} step‚â° final‚â° vl prevOut‚ààprevTx prev‚ààutxo
  = tx , vtx , here (refl , refl) , here (from‚àòto s‚Ä≤)
  where
    ùïç  = (mkValidator sm) ‚ôØ

    -- Create a transaction input.
    _at_‚Üê‚Äî_ : Tx ‚Üí ‚Ñï ‚Üí I ‚Üí TxInput
    outputRef (t at i ‚Üê‚Äî _) = (t ‚ôØ‚Çú‚Çì) indexed-at i
    redeemer  (_ at _ ‚Üê‚Äî d) = toData d
    validator (_ at _ ‚Üê‚Äî _) = mkValidator sm

    -- Create a transaction output.
    _‚Äî‚Üí_at_ : S ‚Üí Value ‚Üí Address ‚Üí TxOutput
    value   (_ ‚Äî‚Üí v at _) = v
    address (_ ‚Äî‚Üí _ at a) = a
    dataVal (d ‚Äî‚Üí _ at _) = toData d

    prevTxRef : TxOutputRef
    prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx)

    j = index prevTxRef

    prevOut : TxOutput
    prevOut = record {value = v; address = ùïç; dataVal = toData s}

    tx : Tx
    inputs  tx = [ prevTx at j ‚Üê‚Äî i ]
    outputs tx = [ s‚Ä≤ ‚Äî‚Üí $ v at ùïç ]
    forge   tx = $0
    fee     tx = $0

    prevTx‚àà : prevTx ‚àà l
    prevTx‚àà = tx‚ôØ‚àà‚áítx‚àà prev‚ààutxo

    prevTx‚ôØ‚àà : Any (Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì) l
    prevTx‚ôØ‚àà = Any.map (cong _‚ôØ‚Çú‚Çì ‚àò sym) prevTx‚àà

    prevTx‚Ä≤ = lookupTx l prevTxRef prevTx‚ôØ‚àà

    lookupPrevTx‚â° : lookupTx l prevTxRef prevTx‚ôØ‚àà ‚â° prevTx
    lookupPrevTx‚â°
      rewrite find‚àòmap {Q = Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì} prevTx‚àà (cong _‚ôØ‚Çú‚Çì ‚àò sym)
            | proj‚ÇÅ‚àòfind prevTx‚àà
            = refl

    len<‚Ä≤ : index prevTxRef < length (outputs prevTx)
    len<‚Ä≤ = to‚Ñï< (Any.index prevOut‚ààprevTx)

    len< : index prevTxRef < length (outputs prevTx‚Ä≤)
    len< rewrite lookupPrevTx‚â° = len<‚Ä≤

    lookupPrevOutput‚â° : lookupOutput l prevTxRef prevTx‚ôØ‚àà len< ‚â° prevOut
    lookupPrevOutput‚â°
      rewrite lookupPrevTx‚â°
            | ‚Äº-from‚Ñï<‚àòto‚Ñï< {xs = outputs prevTx} (Any.index prevOut‚ààprevTx)
            | ‚Äº-index prevOut‚ààprevTx
            = refl

    lookupValue‚â° : lookupValue l (prevTx at j ‚Üê‚Äî i) prevTx‚ôØ‚àà len< ‚â° v
    lookupValue‚â° rewrite lookupPrevOutput‚â° = refl

    addr‚â°‚Ä≤ : address (lookupOutput l prevTxRef prevTx‚ôØ‚àà len<) ‚â° ùïç
    addr‚â°‚Ä≤ rewrite lookupPrevOutput‚â° = refl

    v‚ÇÄ :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        Any (Œª t ‚Üí t ‚ôØ‚Çú‚Çì ‚â° id (outputRef i)) l
    v‚ÇÄ _ (here refl) = prevTx‚ôØ‚àà
    v‚ÇÄ _ (there ())

    v‚ÇÅ :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÄ i i‚àà)))
    v‚ÇÅ _ (here refl) = len<
    v‚ÇÅ _ (there ())

    i‚Ä≤  = prevTx at j ‚Üê‚Äî i
    out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
    ptx = mkPendingTx l tx i‚Ä≤ (here refl) v‚ÇÄ v‚ÇÅ

    ds  = toData s
    di  = toData i
    ds‚Ä≤ = toData s‚Ä≤

    ptxIn : PendingTxInput
    ptxIn = record { validatorHash = ùïç
                   ; dataHash      = ds ‚ôØ·µà
                   ; redeemerHash  = di ‚ôØ·µà
                   ; value         = v }

    dataVal‚â° : dataVal out ‚â° ds
    dataVal‚â° rewrite lookupPrevOutput‚â° = refl

    value‚â° : value out ‚â° v
    value‚â° rewrite lookupPrevOutput‚â° = refl

    ptxIn‚â° : mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
            ‚â° ptxIn
    ptxIn‚â° =
        -- rewrite dataVal‚â° | value‚â° = refl
      begin
        mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
      ‚â°‚ü®‚ü©
        record { validatorHash = ùïç
                ; dataHash      = (dataVal out) ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
      ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = x ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = value out
                            }) dataVal‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = value out
                }
      ‚â°‚ü® cong (Œª x ‚Üí record { validatorHash = ùïç
                            ; dataHash      = ds ‚ôØ·µà
                            ; redeemerHash  = di ‚ôØ·µà
                            ; value         = x
                            }) value‚â°
                ‚ü©
        record { validatorHash = ùïç
                ; dataHash      = ds ‚ôØ·µà
                ; redeemerHash  = di ‚ôØ·µà
                ; value         = v
                }
      ‚â°‚ü®‚ü©
        ptxIn
        ‚àé

    ptxIn‚â°‚Ä≤ : mapWith‚àà (inputs tx) (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
            ‚â° [ ptxIn ]
    ptxIn‚â°‚Ä≤ rewrite ptxIn‚â° = refl

    ptxOut : PendingTxOutput
    ptxOut = record {value = v; validatorHash = ùïç; dataHash = ds‚Ä≤ ‚ôØ·µà}

    ptx‚â° : ptx ‚â° record { inputInfo     = [ ptxIn ]
                        ; thisInput     = ptxIn
                        ; outputInfo    = [ ptxOut ]
                        ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                        ; txHash        = tx ‚ôØ‚Çú‚Çì
                        ; fee           = $0
                        ; forge         = $0 }
    ptx‚â° =
        -- rewrite ptxOut‚â° | ptxIn‚â°‚Ä≤ | ptxIn‚â° = refl
      begin
        ptx
      ‚â°‚ü®‚ü©
        record { inputInfo     = mapWith‚àà [ i‚Ä≤ ] (Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÄ i i‚àà) (v‚ÇÅ i i‚àà))
                ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = x
                            ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                            ; outputInfo    = [ ptxOut ]
                            ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â°‚Ä≤ ‚ü©
        record { inputInfo     = [ ptxIn ]
                ; thisInput     = mkPendingTxIn l i‚Ä≤ (v‚ÇÄ i‚Ä≤ (here refl)) (v‚ÇÅ i‚Ä≤ (here refl))
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚â°‚ü® cong (Œª x ‚Üí record { inputInfo     = [ ptxIn ]
                            ; thisInput     = x
                            ; outputInfo    = [ ptxOut ]
                            ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                            ; txHash        = tx ‚ôØ‚Çú‚Çì
                            ; fee           = $0
                            ; forge         = $0 }) ptxIn‚â° ‚ü©
        record { inputInfo     = [ ptxIn ]
                ; thisInput     = ptxIn
                ; outputInfo    = [ ptxOut ]
                ; dataWitnesses = [ ds‚Ä≤ ‚ôØ·µà , ds‚Ä≤ ]
                ; txHash        = tx ‚ôØ‚Çú‚Çì
                ; fee           = $0
                ; forge         = $0 }
      ‚àé

    state‚Ä≤‚â° : ‚¶á step (pure sm) (fromData ds) (fromData di) ‚¶à ‚â° pure (pure s‚Ä≤)
    state‚Ä≤‚â° rewrite from‚àòto s | from‚àòto i | step‚â° = refl

    outs‚â° : getContinuingOutputs ptx ‚â° [ ptxOut ]
    outs‚â° rewrite ‚âü‚Ñï-refl {ùïç} = refl

    findData‚â° : findData (PendingTxOutput.dataHash ptxOut) ptx ‚â° pure ds‚Ä≤
    findData‚â° rewrite ‚âü‚Ñï-refl {ds‚Ä≤ ‚ôØ·µà} = refl

    validate‚â° : mkValidator sm ptx di ds ‚â° true
    validate‚â°
      rewrite state‚Ä≤‚â°
            | outs‚â°
            | findData‚â°
            | ‚âü·µà-refl {ds‚Ä≤}
            | final‚â°
            = refl

    val :
      let
        i   = prevTx at j ‚Üê‚Äî i
        out = lookupOutput l prevTxRef prevTx‚ôØ‚àà len<
        ptx = mkPendingTx l tx i (here refl) v‚ÇÄ v‚ÇÅ
      in
       T (runValidation ptx i out)
    val rewrite lookupPrevOutput‚â° | validate‚â° = tt

    vtx : IsValidTx tx l
    validTxRefs         vtx = v‚ÇÄ
    validOutputIndices  vtx = v‚ÇÅ
    validOutputRefs     vtx = Œª{ i (here refl) ‚Üí prev‚ààutxo
                               ; _ (there ()) }
    preservesValues     vtx rewrite lookupValue‚â° = refl
    noDoubleSpending    vtx = [] ‚à∑ []
    allInputsValidate   vtx = Œª{ i (here refl) ‚Üí val
                               ; _ (there ()) }
    validateValidHashes vtx = Œª{ i (here refl) ‚Üí addr‚â°‚Ä≤
                               ; _ (there ()) }
