module StateMachine.Properties.Liveness2 where

open import Function using (_‚àò_; case_of_)

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.Unit    using (‚ä§; tt)
open import Data.Bool    using (Bool; T; true; false; if_then_else_)
open import Data.Product using (_√ó_; _,_; ‚àÉ; ‚àÉ-syntax; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum     using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe   using (Maybe)
  renaming (just to pure; ap to _<*>_) -- to use idiom brackets
open import Data.Fin     using (Fin; to‚Ñï; from‚Ñï<)
  renaming (suc to fsuc; zero to fzero)
open import Data.Nat     using (‚Ñï; _<_; z‚â§n; s‚â§s)
  renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.List    using (List; []; _‚à∑_; [_]; map; length; filter; null)

open import Data.List.Relation.Unary.Any as Any using (Any; here; there)
open import Data.List.Membership.Propositional  using (_‚àà_; find; mapWith‚àà)
open import Data.List.Membership.Propositional.Properties  using (find‚àòmap)
open import Data.List.Relation.Unary.AllPairs   using ([]; _‚à∑_)
open import Data.List.Relation.Unary.All        using ([]; _‚à∑_)

open import Relation.Nullary                            using (¬¨_; yes; no)
open import Relation.Nullary.Decidable                  using (‚åä_‚åã)
open import Relation.Binary                             using (Decidable)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; cong; trans; sym; inspect)
  renaming ([_] to ‚â°[_])
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)

open import Prelude.Lists

open import UTxO.Hashing.Base
open import UTxO.Hashing.Types
open import UTxO.Hashing.MetaHash
open import UTxO.Types hiding (I)
open import StateMachine.Base

open PendingTxInput
open PendingTxOutput
open PendingTx

liveness‚Ä≤ : ‚àÄ {S I : Set} {{_ : IsData S}} {{_ : IsData I}} {sm : StateMachine S I}
              {s : S} {i : I} {s‚Ä≤ : S} {l : Ledger}
              {prevTx : Tx} {v : Value}

    -- `s ‚Äî‚Üí[i] s‚Ä≤` constitutes a valid transition in the state machine
  ‚Üí step sm s i ‚â° pure s‚Ä≤

    -- we are not moving to a final state
  ‚Üí isFinal sm s‚Ä≤ ‚â° false

    -- existing ledger is valid
  ‚Üí (vl : ValidLedger l)

    -- previous output is an element of previous transaction
  ‚Üí (prevOut‚ààprevTx : s ‚Äî‚Üí $ v at sm ‚àà outputs prevTx)

  ‚Üí let prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx) in

    -- previous unspent output
    prevTxRef SET‚Çí.‚àà‚Ä≤ unspentOutputs l

    ---------------------------------------------------------------------------------------

  ‚Üí ‚àÉ[ tx ]
       ( -- (1) new transaction is valid
         IsValidTx tx l
         -- (2) it contains the source state in its inputs, using the state machine's validator
       √ó (prevTxRef ‚Üê‚Äî i , sm ‚àà inputs tx)
         -- (3) it contains the target state in its outputs
       √ó (s‚Ä≤ ‚Äî‚Üí $ v at sm ‚àà outputs tx)
       )

liveness‚Ä≤ {S} {I} {sm} {s} {i} {s‚Ä≤} {l} {prevTx} {v} step‚â° final‚â° vl prevOut‚ààprevTx prev‚ààutxo
  = tx , vtx , here refl , here refl
  where
    ds  = toData s
    di  = toData i
    ds‚Ä≤ = toData s‚Ä≤
    ùïç  = (mkValidator sm) ‚ôØ

    prevTxRef : TxOutputRef
    prevTxRef = (prevTx ‚ôØ‚Çú‚Çì) indexed-at to‚Ñï (Any.index prevOut‚ààprevTx)

    prevOut : TxOutput
    value   prevOut = v
    address prevOut = ùïç
    dataVal prevOut = ds

    tx : Tx
    inputs  tx = [ prevTxRef ‚Üê‚Äî i , sm ]
    outputs tx = [ s‚Ä≤ ‚Äî‚Üí $ v at sm ]
    forge   tx = $ 0
    fee     tx = $ 0

    prevTx‚àà : prevTx ‚àà l
    prevTx‚àà = tx‚ôØ‚àà‚áítx‚àà prev‚ààutxo

    prevTx‚ôØ‚àà : Any (Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì) l
    prevTx‚ôØ‚àà = Any.map (cong _‚ôØ‚Çú‚Çì ‚àò sym) prevTx‚àà

    lookupPrevTx‚â° : lookupTx l prevTxRef prevTx‚ôØ‚àà ‚â° prevTx
    lookupPrevTx‚â°
      rewrite find‚àòmap {Q = Œª tx ‚Üí tx ‚ôØ‚Çú‚Çì ‚â° prevTx ‚ôØ‚Çú‚Çì} prevTx‚àà (cong _‚ôØ‚Çú‚Çì ‚àò sym)
            | proj‚ÇÅ‚àòfind prevTx‚àà
            = refl

    len< : index prevTxRef < length (outputs (lookupTx l prevTxRef prevTx‚ôØ‚àà))
    len< rewrite lookupPrevTx‚â° = to‚Ñï< (Any.index prevOut‚ààprevTx)

    lookupPrevOutput‚â° : lookupOutput l prevTxRef prevTx‚ôØ‚àà len< ‚â° prevOut
    lookupPrevOutput‚â°
      rewrite lookupPrevTx‚â°
            | ‚Äº-from‚Ñï<‚àòto‚Ñï< {xs = outputs prevTx} (Any.index prevOut‚ààprevTx)
            | ‚Äº-index prevOut‚ààprevTx
            = refl

    v‚ÇÄ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ‚Çú‚Çì ‚â° id (outputRef i)) l
    v‚ÇÄ _ (here refl) = prevTx‚ôØ‚àà

    v‚ÇÅ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÄ i i‚àà)))
    v‚ÇÅ _ (here refl) = len<

    ptx = mkPendingTx l tx (prevTxRef ‚Üê‚Äî i , sm) (here refl) v‚ÇÄ v‚ÇÅ

    ptxOut : PendingTxOutput
    value         ptxOut = v
    validatorHash ptxOut = ùïç
    dataHash      ptxOut = ds‚Ä≤ ‚ôØ·µà

    state‚â° : ‚¶á step (pure sm) (fromData ds) (fromData di) ‚¶à ‚â° pure (pure s‚Ä≤)
    state‚â° rewrite from‚àòto s | from‚àòto i | step‚â° = refl

    outs‚â° : getContinuingOutputs ptx ‚â° [ ptxOut ]
    outs‚â° rewrite ‚âü‚Ñï-refl {ùïç} = refl

    findData‚â° : findData (PendingTxOutput.dataHash ptxOut) ptx ‚â° pure ds‚Ä≤
    findData‚â° rewrite ‚âü‚Ñï-refl {ds‚Ä≤ ‚ôØ·µà} = refl

    validate‚â° : mkValidator sm ptx di ds ‚â° true
    validate‚â° rewrite state‚â° | outs‚â° | findData‚â° | ‚âü·µà-refl {ds‚Ä≤} | final‚â° = refl

    vtx : IsValidTx tx l
    validTxRefs         vtx = v‚ÇÄ
    validOutputIndices  vtx = v‚ÇÅ
    validOutputRefs     vtx _ (here refl) = prev‚ààutxo
    preservesValues     vtx rewrite lookupPrevOutput‚â° = refl
    noDoubleSpending    vtx = [] ‚à∑ []
    allInputsValidate   vtx _ (here refl) rewrite lookupPrevOutput‚â° | validate‚â° = tt
    validateValidHashes vtx _ (here refl) rewrite lookupPrevOutput‚â° = refl
