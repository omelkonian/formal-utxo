{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --rewriting #-}
{- NB: We use REWRITE rules to help normalization of calls to the postulated hash function _‚ôØ. -}
module StateMachine.Examples.GuessingGame where

open import Agda.Builtin.Equality.Rewrite

open import Level          using (0‚Ñì)
open import Function       using (_‚àò_; const; case_of_; flip; _$_)
open import Category.Monad using (RawMonad)

open import Data.Empty   using (‚ä•-elim)
open import Data.Bool    using (Bool; true; false; _‚àß_; if_then_else_)
open import Data.Product using (_√ó_; _,_)
open import Data.Maybe   using (Maybe; just; nothing)
open import Data.Nat     using ()
  renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Integer using (+_; ‚à£_‚à£)
open import Data.Char    using (Char; to‚Ñï; from‚Ñï)
open import Data.String  using (String; toList; fromList)
  renaming (_‚âü_ to _‚âü‚Çõ_)
open import Data.List    using (List; []; _‚à∑_; [_]; foldr; map)

import Data.Maybe.Categorical as MaybeCat
open RawMonad {f = 0‚Ñì} MaybeCat.monad renaming (_‚äõ_ to _<*>_)

open import Relation.Nullary            using (yes; no)
open import Relation.Nullary.Decidable            using (‚åä_‚åã)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import UTxO.Hashing
open import UTxO.Value
open import UTxO.Types
open import UTxO.Validity
open import StateMachine.Base

open import Prelude.Default
open import UTxO.Defaults

HashedString = HashId
ClearString  = String

data GameState : Set where
  Locked : HashedString ‚Üí GameState

data GameInput : Set where
  Guess : ClearString ‚Üí HashedString ‚Üí GameInput

instance
  IsData·µçÀ¢ : IsData GameState
  toData   {{IsData·µçÀ¢}} (Locked hs) = H hs

  fromData {{IsData·µçÀ¢}} (H hs) = just (Locked hs)
  fromData {{IsData·µçÀ¢}} _      = nothing

  from‚àòto  {{IsData·µçÀ¢}} (Locked _) = refl

  from-inj {{IsData·µçÀ¢}} (H hs) .(Locked hs) refl = refl
  from-inj {{IsData·µçÀ¢}} (CONSTR _ _) _ ()
  from-inj {{IsData·µçÀ¢}} (LIST _) _ ()
  from-inj {{IsData·µçÀ¢}} (I _) _ ()
  from-inj {{IsData·µçÀ¢}} (MAP _) _ ()

  IsData·µç‚Å± : IsData GameInput
  toData   {{IsData·µç‚Å±}} (Guess cs hs) = LIST (toData cs ‚à∑ H hs ‚à∑ [])

  fromData {{IsData·µç‚Å±}} (LIST (d ‚à∑ H hs ‚à∑ [])) = flip Guess hs <$> fromData d
  fromData {{IsData·µç‚Å±}} _                      = nothing

  from‚àòto  {{IsData·µç‚Å±}} (Guess cs hs) rewrite from‚àòto cs = refl

  from-inj {{IsData·µç‚Å±}} (LIST xs) (Guess cs hs) p = {!!}
  from-inj {{IsData·µç‚Å±}} (CONSTR _ _) _ ()
  from-inj {{IsData·µç‚Å±}} (H _) _ ()
  from-inj {{IsData·µç‚Å±}} (I _) _ ()
  from-inj {{IsData·µç‚Å±}} (MAP _) _ ()

GameStateMachine : StateMachine GameState GameInput
isInitial GameStateMachine = const true
step      GameStateMachine (Locked currentSecret) (Guess theGuess nextSecret) =
  if ‚åä (theGuess ‚ôØ‚Çõ‚Çú·µ£) ‚âü‚Ñï currentSecret ‚åã then
    just (Locked nextSecret , def)
  else
    nothing
origin    GameStateMachine = nothing


-- ** Example ledger.

open CEM {sm = GameStateMachine}

-- 1) game states

st‚ÇÅ = Locked ("0" ‚ôØ‚Çõ‚Çú·µ£)
  --> Guess "0" "1"
st‚ÇÇ = Locked ("1" ‚ôØ‚Çõ‚Çú·µ£)

-- 2) transactions

t‚ÇÅ : Tx
t‚ÇÅ = record (withOutputs [ st‚ÇÅ ])
  { forge    = thread‚Çõ‚Çò
  ; policies = [ policy‚Çõ‚Çò ] }

t‚ÇÇ : Tx
t‚ÇÇ = record (withOutputs [ st‚ÇÇ ])
  { inputs  = [ (t‚ÇÅ ‚ôØ‚Çú‚Çì) indexed-at 0 ‚Üê‚Äî (Guess "0" ("1" ‚ôØ‚Çõ‚Çú·µ£) , st‚ÇÅ) ] }

-- 3) validate

{-
-- *** takes around 1 hour to type-check...
-- T0D0: profile to debug performance

postulate ‚ÑÇ‚â° : policy‚Çõ‚Çò ‚ôØ ‚â° 0
{-# REWRITE ‚ÑÇ‚â° #-}

postulate ùïç‚â° : validator‚Çõ‚Çò ‚ôØ ‚â° 1
{-# REWRITE ùïç‚â° #-}

ex-play : ValidLedger (t‚ÇÇ ‚à∑ t‚ÇÅ ‚à∑ [])
ex-play = ‚àô ‚äï t‚ÇÅ ‚äï t‚ÇÇ
-}
