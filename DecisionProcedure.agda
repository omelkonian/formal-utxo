open import Function using (_‚àò_; _‚àã_; flip; _$_)

open import Data.Empty    using (‚ä•; ‚ä•-elim)
open import Data.Unit     using (‚ä§; tt)
open import Data.Bool     using (Bool; T)
open import Data.Bool.Properties using (T?)
open import Data.Product  using (proj‚ÇÅ; ‚àÉ; ‚àÉ-syntax; Œ£; Œ£-syntax)
open import Data.Nat      using (‚Ñï; zero; suc; _+_; _<_; _‚âü_; _<?_)
open import Data.Fin      using (Fin; to‚Ñï; from‚Ñï‚â§)
open import Data.List     using (List; []; _‚à∑_; _‚à∑ ≥_; [_]; length; sum; map)
open import Data.List.Any using (Any)

open import Relation.Nullary                      using (yes; no)
open import Relation.Binary                       using (Rel; Setoid)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; setoid)

open import Category.Functor       using (RawFunctor)
open import Data.List.Categorical  renaming (functor to listFunctor)
open import Data.List.Membership.Propositional using (_‚àà_; mapWith‚àà)

open import Relation.Nullary using (Dec; ¬¨_)
open import Relation.Binary using (Decidable)
open import Data.List.Relation.Unary.Any using (Any; any; here; there)
open import Data.List.Membership.Propositional using (_‚àà_)

open import Utilities.Lists
open import Data.TYPE using (ùïå; el; _‚âü·µ§_)
open import Types
open import Currency

module DecisionProcedure (addresses : List Address) where

open import UTxO addresses


‚àÄ? : ‚àÄ {‚Ñì ‚Ñì‚Ä≤} {A : Set ‚Ñì}
     ‚Üí (xs : List A)
     ‚Üí {P : (x : A) (x‚àà : x ‚àà xs) ‚Üí Set ‚Ñì‚Ä≤}
     ‚Üí (‚àÄ x ‚Üí (x‚àà : x ‚àà xs) ‚Üí Dec (P x x‚àà))
     ‚Üí Dec (‚àÄ x x‚àà ‚Üí P x x‚àà)
‚àÄ? []       P? = yes Œª _ ()
‚àÄ? (x ‚à∑ xs) P?
  with ‚àÄ? xs (Œª x‚Ä≤ x‚àà ‚Üí P? x‚Ä≤ (there x‚àà))
... | no ¬¨p = no Œª p ‚Üí ¬¨p (Œª x‚Ä≤ x‚àà ‚Üí p x‚Ä≤ (there x‚àà))
... | yes p‚Ä≤
  with P? x (here refl)
... | no ¬¨p = no Œª p ‚Üí ¬¨p (p x (here refl))
... | yes p = yes Œª { x‚Ä≤ (here refl) ‚Üí p
                    ; x‚Ä≤ (there x‚àà)  ‚Üí p‚Ä≤ x‚Ä≤ x‚àà
                    }

validTxRefs? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí Dec (‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
validTxRefs? tx l =
  ‚àÄ? (inputs tx) Œª i _ ‚Üí
    any (Œª t ‚Üí t ‚ôØ ‚âü id (outputRef i)) l

validOutputIndices? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
  ‚Üí Dec (‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
           index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
validOutputIndices? tx l v‚ÇÅ =
  ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
    index (outputRef i) <? length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà)))

validOutputRefs? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí Dec (‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí outputRef i SET‚Çí.‚àà‚Ä≤ unspentOutputs l)
validOutputRefs? tx l =
  ‚àÄ? (inputs tx) Œª i _ ‚Üí
    outputRef i SET‚Çí.‚àà? SET‚Çí.list (unspentOutputs l)

validDataScriptTypes? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
  ‚Üí (v‚ÇÇ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
            index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
  ‚Üí Dec (‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
           D i ‚â° Data (lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)))
validDataScriptTypes? tx l v‚ÇÅ v‚ÇÇ =
  ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
    D i ‚âü·µ§ Data (lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà))

-- preservesValues? : ‚àÄ (tx : Tx) (l : Ledger)
--   ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
--   ‚Üí (v‚ÇÇ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
--             index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
--   ‚Üí Dec (forge tx +·∂ú sum·∂ú (mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí
--                              lookupValue l i (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà))
--            ‚â°
--          fee tx +·∂ú sum·∂ú (map value (outputs tx)))
-- preservesValues? tx l v‚ÇÅ v‚ÇÇ =
--   forge tx +·∂ú sum·∂ú (mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí
--                       lookupValue l i (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà))
--     ‚âü -- NB: no decidable equality for AVL trees
--   fee tx +·∂ú sum·∂ú (map value (outputs tx))

noDoubleSpending? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí Dec (SET‚Çí.noDuplicates (map outputRef (inputs tx)))
noDoubleSpending? tx l =
  SET‚Çí.noDuplicates? (map outputRef (inputs tx))

allInputsValidate? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
  ‚Üí (v‚ÇÇ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
            index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
  ‚Üí (v‚ÇÑ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
            D i ‚â° Data (lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)))
  ‚Üí ‚àÄ (st : State) -- NB: cannot completely decide the proposition, hence the lifting of the ‚àÄ
  ‚Üí Dec (‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
           let
             out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
             ptx = mkPendingTx l tx v‚ÇÅ v‚ÇÇ
           in
             T (runValidation ptx i out (v‚ÇÑ i i‚àà) st))
allInputsValidate? tx l v‚ÇÅ v‚ÇÇ v‚ÇÑ st =
  ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
    let
      out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
      ptx = mkPendingTx l tx v‚ÇÅ v‚ÇÇ
    in
      T? (runValidation ptx i out (v‚ÇÑ i i‚àà) st)

validateValidHashes? : ‚àÄ (tx : Tx) (l : Ledger)
  ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
  ‚Üí (v‚ÇÇ : ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
            index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
  ‚Üí Dec (‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
           let
             out : TxOutput
             out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
           in
             to‚Ñï (address out) ‚â° (validator i) ‚ôØ)
validateValidHashes? tx l v‚ÇÅ v‚ÇÇ =
  ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
    let
      out : TxOutput
      out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
    in
      to‚Ñï (address out) ‚âü (validator i) ‚ôØ

{-
isValidTx? : ‚àÄ (tx : Tx) ‚Üí (l : Ledger) ‚Üí Dec (IsValidTx tx l)
isValidTx? tx l
  with validTxRefs? tx l
... | no ¬¨p = no (¬¨p ‚àò validTxRefs)
... | yes v‚ÇÅ
  with validOutputIndices? tx l v‚ÇÅ
... | no ¬¨p = no Œª valid ‚Üí ¬¨p (Œª v x ‚Üí {!validOutputIndices valid!})
... | yes v‚ÇÇ
  with validOutputRefs? tx l
... | no ¬¨p = no (¬¨p ‚àò validOutputRefs)
... | yes v‚ÇÉ
  with validDataScriptTypes? tx l v‚ÇÅ v‚ÇÇ
... | no ¬¨p  = no (¬¨p ‚àò {!validDataScriptTypes!})
... | yes v‚ÇÑ
   with preservesValues? tx l v‚ÇÅ v‚ÇÇ
... | no ¬¨p = no (¬¨p ‚àò {!preservesValues!})
... | yes v‚ÇÖ
  with noDoubleSpending? tx l
... | no ¬¨p = no (¬¨p ‚àò noDoubleSpending)
... | yes v‚ÇÜ
  with allInputsValidate? tx l v‚ÇÅ v‚ÇÇ v‚ÇÑ (record {height = 0})
... | no ¬¨p = no (¬¨p ‚àò {!allInputsValidate!})
... | yes v‚Çá
  with validateValidHashes? tx l v‚ÇÅ v‚ÇÇ
... | no ¬¨p = no (¬¨p ‚àò {!validateValidHashes!})
... | yes v‚Çà = yes (record
                      { validTxRefs          = v‚ÇÅ
                      ; validOutputIndices   = v‚ÇÇ
                      ; validOutputRefs      = v‚ÇÉ
                      ; validDataScriptTypes = v‚ÇÑ
                      ; preservesValues      = v‚ÇÖ
                      ; noDoubleSpending     = v‚ÇÜ
                      ; allInputsValidate    = {!!}
                      ; validateValidHashes  = v‚Çà
                      })
-}

{-
_‚Üí-dec_ : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set ‚Ñì‚ÇÅ} {B : Set ‚Ñì‚ÇÇ} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A ‚Üí B)
_     ‚Üí-dec yes y  =  yes (Œª _ ‚Üí y)
no ¬¨x ‚Üí-dec _      =  yes (Œª x ‚Üí ‚ä•-elim (¬¨x x))
yes x ‚Üí-dec no ¬¨y  =  no (Œª f ‚Üí ¬¨y (f x))

_‚Üí?_ : ‚àÄ {A : Set} {B : A ‚Üí Set}
     ‚Üí Dec A
     ‚Üí (‚àÄ a ‚Üí Dec (B a))
     ‚Üí Dec ((a : A) ‚Üí B a)
yes a ‚Üí? b? with b? a
... | yes p = yes (Œª a‚ÇÅ ‚Üí {!!})
... | no ¬¨p = no (Œª b ‚Üí ¬¨p (b a))
no ¬¨a ‚Üí? _ = yes (Œª a ‚Üí ‚ä•-elim (¬¨a a))

‚àÄstate? : ‚àÄ {‚Ñì} {P : State ‚Üí Set ‚Ñì}
        ‚Üí (‚àÄ st ‚Üí Dec (P st))
        ‚Üí Dec (‚àÄ (st : State) ‚Üí P st)
‚àÄstate? P?
  with P? (record { height = 0 })
... | no ¬¨p = no Œª p ‚Üí ¬¨p (p (record { height = 0 }))
... | yes p = yes (Œª { record { height = 0 } ‚Üí p ; record { height = (suc n) } ‚Üí {!!} })
-}
