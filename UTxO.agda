open import Level    using (0‚Ñì)
open import Function using (_‚àò_; _‚àã_; flip; _$_)

open import Data.Empty    using (‚ä•; ‚ä•-elim)
open import Data.Unit     using (‚ä§; tt)
open import Data.Bool     using (Bool; T)
open import Data.Product  using (_√ó_; proj‚ÇÅ; ‚àÉ; ‚àÉ-syntax; Œ£; Œ£-syntax)
open import Data.Nat      using (‚Ñï; zero; suc; _+_; _<_; _‚âü_)
open import Data.Fin      using (Fin; to‚Ñï; from‚Ñï‚â§)
open import Data.List     using (List; []; _‚à∑_; _‚à∑ ≥_; [_]; length; sum; map)
open import Data.List.Any using (Any)

open import Relation.Nullary                      using (yes; no)
open import Relation.Binary                       using (Rel; Setoid)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; setoid)

open import Category.Functor       using (RawFunctor)
open import Data.List.Categorical  renaming (functor to listFunctor)
open import Data.List.Membership.Propositional using (_‚àà_; mapWith‚àà)

open import Utilities.Lists
open import Data.TYPE using (ùïå; el; _‚âü·µ§_)
open import Types

module UTxO (addresses : List Address) where

------------------------------------------------------------------------
-- Transactions.

record TxOutput : Set where
  field
    value   : Value
    address : Index addresses

    Data       : ùïå
    dataScript : State ‚Üí el Data

open TxOutput public

runValidation : PendingTx ‚Üí (i : TxInput) ‚Üí (o : TxOutput) ‚Üí D i ‚â° Data o ‚Üí State ‚Üí Bool
runValidation ptx i o refl st =
  validator i st (value o) ptx (redeemer i st) (dataScript o st)

record Tx : Set where
  field
    inputs  : List TxInput -- T0D0: Set‚ü®TxInput‚ü©
    outputs : List TxOutput
    forge   : Value
    fee     : Value

open Tx public

--------------------------------------------------------------------------------------
-- Ledgers and unspent outputs.

Ledger : Set
Ledger = List Tx

module _ where
  open SET‚Çí renaming (fromList to fromList‚Çí)

  unspentOutputsTx : Tx ‚Üí Set‚ü®TxOutputRef‚ü©
  unspentOutputsTx tx = fromList‚Çí (map ((tx ‚ôØ) indexed-at_) (indices (outputs tx)))

  spentOutputsTx : Tx ‚Üí Set‚ü®TxOutputRef‚ü©
  spentOutputsTx tx = fromList‚Çí (map outputRef (inputs tx))

  unspentOutputs : Ledger ‚Üí Set‚ü®TxOutputRef‚ü©
  unspentOutputs []         = ‚àÖ
  unspentOutputs (tx ‚à∑ txs) = unspentOutputs txs ‚îÄ spentOutputsTx tx
                            ‚à™ unspentOutputsTx tx

------------------------------------------------------------------------
-- Tx utilities.

open import Data.List.Membership.Setoid (setoid Tx) using (find)

lookupTx : (l : Ledger)
         ‚Üí (out : TxOutputRef)
         ‚Üí Any (Œª tx ‚Üí tx ‚ôØ ‚â° id out) l
         ‚Üí Tx
lookupTx l out ‚àÉtx‚â°id = proj‚ÇÅ (find ‚àÉtx‚â°id)

lookupOutput : (l : Ledger)
             ‚Üí (out : TxOutputRef)
             ‚Üí (‚àÉtx‚â°id : Any (Œª tx ‚Üí tx ‚ôØ ‚â° id out) l)
             ‚Üí index out < length (outputs (lookupTx l out ‚àÉtx‚â°id))
             ‚Üí TxOutput
lookupOutput l out ‚àÉtx‚â°id index‚â§len =
  outputs (lookupTx l out ‚àÉtx‚â°id) ‚Äº (from‚Ñï‚â§ {index out} index‚â§len)

lookupValue : (l : Ledger)
            ‚Üí (input : TxInput)
            ‚Üí (‚àÉtx‚â°id : Any (Œª tx ‚Üí tx ‚ôØ ‚â° id (outputRef input)) l)
            ‚Üí index (outputRef input) <
                length (outputs (lookupTx l (outputRef input) ‚àÉtx‚â°id))
            ‚Üí Value
lookupValue l input ‚àÉtx‚â°id index‚â§len =
  value (lookupOutput l (outputRef input) ‚àÉtx‚â°id index‚â§len)

--------------------------------------------------------------------------------------
-- Pending transactions (i.e. parts of the transaction being passed to a validator).

mkPendingTxOut : TxOutput ‚Üí PendingTxOutput
mkPendingTxOut txOut = record
                         { value         = value txOut
                         ; dataHash      = (dataScript txOut) ‚ôØ
                         }

mkPendingTxIn : (l : Ledger)
              ‚Üí (input : TxInput)
              ‚Üí (‚àÉtx‚â°id : Any (Œª tx ‚Üí tx ‚ôØ ‚â° id (outputRef input)) l)
              ‚Üí index (outputRef input) < length (outputs (lookupTx l (outputRef input) ‚àÉtx‚â°id))
              ‚Üí PendingTxInput
mkPendingTxIn l txIn ‚àÉtx index< = record
                       { value         = lookupValue l txIn ‚àÉtx index<
                       ; validatorHash = (validator txIn) ‚ôØ
                       ; redeemerHash  = (redeemer txIn) ‚ôØ
                       }

mkPendingTx : (l : Ledger)
            ‚Üí (tx : Tx)
            ‚Üí (v‚ÇÅ : ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l)
            ‚Üí (‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
                 index (outputRef i) < length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà))))
            ‚Üí PendingTx
mkPendingTx l tx v‚ÇÅ v‚ÇÇ =
  record { txHash  = tx ‚ôØ
         ; inputs  = mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí mkPendingTxIn l i (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
         ; outputs = map mkPendingTxOut (outputs tx)
         ; forge   = forge tx
         ; fee     = fee tx
         }

------------------------------------------------------------------------
-- Properties.

record IsValidTx (tx : Tx) (l : Ledger) : Set where

  field

    validTxRefs :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l

    validOutputIndices :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
          index (outputRef i) < length (outputs (lookupTx l (outputRef i) (validTxRefs i i‚àà)))

    validOutputRefs :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        outputRef i SET‚Çí.‚àà‚Ä≤ unspentOutputs l

    validDataScriptTypes :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        D i ‚â° Data (lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà))

    -----------------------------------------------------------------------------------------

    preservesValues :
      forge tx +·∂ú sum·∂ú (mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí
                          lookupValue l i (validTxRefs i i‚àà) (validOutputIndices i i‚àà))
        ‚â°
      fee tx +·∂ú sum·∂ú (map value (outputs tx))

    noDoubleSpending :
      SET‚Çí.noDuplicates (map outputRef (inputs tx))

    allInputsValidate :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        let
          out = lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà)
          ptx = mkPendingTx l tx validTxRefs validOutputIndices
        in
          ‚àÄ (st : State) ‚Üí
            T (runValidation ptx i out (validDataScriptTypes i i‚àà) st)

    validateValidHashes :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        let
          out = lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà)
        in
          to‚Ñï (address out) ‚â° (validator i) ‚ôØ

    -- enforce monetary policies
    forging :
      ‚àÄ c ‚Üí c ‚àà values (forge tx) ‚Üí
        ‚àÉ[ i ] ( (i ‚àà inputs tx)
               √ó (id (outputRef i) ‚â° c)
               )


open IsValidTx public

-- List notation for constructing valid ledgers.
data ValidLedger : Ledger ‚Üí Set where

  ‚àô_‚à∂-_ : (t : Tx)
       ‚Üí .(IsValidTx t [])
       ‚Üí ValidLedger [ t ]

  _‚äï_‚à∂-_ : ‚àÄ {l}
         ‚Üí ValidLedger l
         ‚Üí (t : Tx)
         ‚Üí .(IsValidTx t l)
         ‚Üí ValidLedger (t ‚à∑ l)

infixl 5 _‚äï_‚à∂-_
