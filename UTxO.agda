{-# OPTIONS --allow-unsolved-metas #-}
open import Level    using (0‚Ñì)
open import Function using (_‚àò_; _‚àã_; flip)

open import Data.Empty    using (‚ä•; ‚ä•-elim)
open import Data.Unit     using (‚ä§; tt)
open import Data.Bool     using (Bool; T)
open import Data.Product  using (proj‚ÇÅ)
open import Data.Nat      using (‚Ñï; zero; suc; _+_; _<_; _‚âü_)
open import Data.Fin      using (Fin; to‚Ñï; from‚Ñï‚â§)
open import Data.List     using (List; []; _‚à∑_; _‚à∑ ≥_; [_]; length; sum; map)
open import Data.List.Any using (Any)

open import Relation.Nullary                      using (yes; no)
open import Relation.Binary                       using (Rel; Setoid)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; setoid)

open import Category.Functor       using (RawFunctor)
open import Data.List.Categorical  renaming (functor to listFunctor)
open import Data.List.Membership.Propositional using (_‚àà_; mapWith‚àà)

open import Utilities.Lists
open import Data.TYPE using (ùïå; el; _‚âü·µ§_)
open import Types

module UTxO (addresses : List Address) where

------------------------------------------------------------------------
-- Transactions.

record TxOutput : Set‚ÇÅ where
  field
    value   : Value
    address : Index addresses

    Data       : ùïå
    dataScript : State ‚Üí el Data

open TxOutput public

runValidation : (i : TxInput) ‚Üí (o : TxOutput) ‚Üí D i ‚â° Data o ‚Üí State ‚Üí Bool
runValidation i o refl st = validator i st (value o) (redeemer i st) (dataScript o st)

record Tx : Set‚ÇÅ where

  field
    inputs  : List TxInput -- T0D0: Set‚ü®TxInput‚ü©
    outputs : List TxOutput
    forge   : Value
    fee     : Value

open Tx public

Ledger : Set‚ÇÅ
Ledger = List Tx

module _ where
  open SET‚Çí

  unspentOutputsTx : Tx ‚Üí Set‚ü®TxOutputRef‚ü©
  unspentOutputsTx tx = fromList (map ((tx ‚ôØ) indexed-at_) (indices (outputs tx)))

  spentOutputsTx : Tx ‚Üí Set‚ü®TxOutputRef‚ü©
  spentOutputsTx tx = fromList (map outputRef (inputs tx))

  unspentOutputs : Ledger ‚Üí Set‚ü®TxOutputRef‚ü©
  unspentOutputs []         = ‚àÖ
  unspentOutputs (tx ‚à∑ txs) = unspentOutputs txs ‚îÄ spentOutputsTx tx
                            ‚à™ unspentOutputsTx tx

------------------------------------------------------------------------
-- Tx utilities.

open import Data.List.Membership.Setoid (setoid Tx) using (find)

lookupTx : (l : Ledger)
         ‚Üí (out : TxOutputRef)
         ‚Üí Any (Œª tx ‚Üí tx ‚ôØ ‚â° id out) l
         ‚Üí Tx
lookupTx l out ‚àÉtx‚â°id = proj‚ÇÅ (find ‚àÉtx‚â°id)

lookupOutput : (l : Ledger)
             ‚Üí (out : TxOutputRef)
             ‚Üí (‚àÉtx‚â°id : Any (Œª tx ‚Üí tx ‚ôØ ‚â° id out) l)
             ‚Üí index out < length (outputs (lookupTx l out ‚àÉtx‚â°id))
             ‚Üí TxOutput
lookupOutput l out ‚àÉtx‚â°id index‚â§len =
  outputs (lookupTx l out ‚àÉtx‚â°id) ‚Äº (from‚Ñï‚â§ {index out} index‚â§len)

lookupValue : (l : Ledger)
            ‚Üí (input : TxInput)
            ‚Üí (‚àÉtx‚â°id : Any (Œª tx ‚Üí tx ‚ôØ ‚â° id (outputRef input)) l)
            ‚Üí index (outputRef input) <
                length (outputs (lookupTx l (outputRef input) ‚àÉtx‚â°id))
            ‚Üí Value
lookupValue l input ‚àÉtx‚â°id index‚â§len =
  value (lookupOutput l (outputRef input) ‚àÉtx‚â°id index‚â§len)

------------------------------------------------------------------------
-- Properties.

record IsValidTx (tx : Tx) (l : Ledger) : Set‚ÇÅ where

  field

    validTxRefs :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        Any (Œª t ‚Üí t ‚ôØ ‚â° id (outputRef i)) l

    validOutputIndices :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        index (outputRef i) <
          length (outputs (lookupTx l (outputRef i) (validTxRefs i i‚àà)))

    validOutputRefs :
      ‚àÄ i ‚Üí i ‚àà inputs tx ‚Üí
        outputRef i SET‚Çí.‚àà‚Ä≤ unspentOutputs l

    validDataScriptTypes :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        D i ‚â° Data (lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà))

    -----------------------------------------------------------------------------------------

    preservesValues :
      forge tx + sum (mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí
                   lookupValue l i (validTxRefs i i‚àà) (validOutputIndices i i‚àà))
        ‚â°
      fee tx + Œ£[ value ‚àà outputs tx ]

    noDoubleSpending :
      SET‚Çí.noDuplicates (map outputRef (inputs tx))

    allInputsValidate : -- {_‚âà_ : Rel State 0‚Ñì} ‚Üí
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        let
          out : TxOutput
          out = lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà)
        in
          ‚àÄ (st : State) ‚Üí
            T (runValidation i out (validDataScriptTypes i i‚àà) st)

    validateValidHashes :
      ‚àÄ i ‚Üí (i‚àà : i ‚àà inputs tx) ‚Üí
        let
          out : TxOutput
          out = lookupOutput l (outputRef i) (validTxRefs i i‚àà) (validOutputIndices i i‚àà)
        in
          to‚Ñï (address out) ‚â° (validator i) ‚ôØ

open IsValidTx public

-- List notation for constructing valid ledgers.
data ValidLedger : Ledger ‚Üí Set‚ÇÅ where

  ‚àô_‚à∂-_ : (t : Tx)
       ‚Üí .(IsValidTx t [])
       ‚Üí ValidLedger [ t ]

  _‚äï_‚à∂-_ : ‚àÄ {l}
         ‚Üí ValidLedger l
         ‚Üí (t : Tx)
         ‚Üí .(IsValidTx t l)
         ‚Üí ValidLedger (t ‚à∑ l)

infixl 5 _‚äï_‚à∂-_



-- Decidable procedure for IsValidTx.
open import Relation.Nullary using (Dec; ¬¨_)
open import Relation.Binary using (Decidable)
open import Data.List.Relation.Unary.Any using (Any; any; here; there)
open import Data.List.Membership.Propositional using (_‚àà_)


‚àÄ? : ‚àÄ {‚Ñì ‚Ñì‚Ä≤} {A : Set ‚Ñì}
     ‚Üí (xs : List A)
     ‚Üí {P : (x : A) ‚Üí (x‚àà : x ‚àà xs) ‚Üí Set ‚Ñì‚Ä≤}
     ‚Üí (‚àÄ x ‚Üí (x‚àà : x ‚àà xs) ‚Üí Dec (P x x‚àà))
     ‚Üí Dec (‚àÄ x ‚Üí (x‚àà : x ‚àà xs) ‚Üí P x x‚àà)
‚àÄ? []       P? = yes Œª _ ()
‚àÄ? (x ‚à∑ xs) P?
  with ‚àÄ? xs (Œª x‚Ä≤ x‚àà ‚Üí P? x‚Ä≤ (there x‚àà))
... | no ¬¨p = no Œª p ‚Üí ¬¨p (Œª x‚Ä≤ x‚àà ‚Üí p x‚Ä≤ (there x‚àà))
... | yes p‚Ä≤
  with P? x (here refl)
... | no ¬¨p = no (Œª p ‚Üí ¬¨p (p x (here refl)))
... | yes p = yes (Œª { x‚Ä≤ (here refl) ‚Üí p
                     ; x‚Ä≤ (there x‚àà)  ‚Üí p‚Ä≤ x‚Ä≤ x‚àà
                     })

open import Data.Nat using (_<?_)
open import Data.Bool.Properties using (T?)

postulate
  ‚àÄstate? : ‚àÄ {‚Ñì} {P : State ‚Üí Set ‚Ñì}
          ‚Üí (‚àÄ st ‚Üí Dec (P st))
          ‚Üí Dec (‚àÄ (st : State) ‚Üí P st)

isValidTx? : ‚àÄ (tx : Tx) ‚Üí (l : Ledger) ‚Üí Dec (IsValidTx tx l)
isValidTx? tx l
    -- validTxRefs
  with ‚àÄ? (inputs tx) Œª i _ ‚Üí
         any (Œª t ‚Üí t ‚ôØ  ‚âü id (outputRef i)) l
... | no ¬¨p = no (¬¨p ‚àò validTxRefs)
... | yes v‚ÇÅ
  -- validOutputIndices
  with ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
       index (outputRef i) <? length (outputs (lookupTx l (outputRef i) (v‚ÇÅ i i‚àà)))
... | no ¬¨p = no (¬¨p ‚àò Œª valid x x‚àà ‚Üí {!!})-- {!validOutputIndices!})
... | yes v‚ÇÇ
  -- validOutputRefs
  with ‚àÄ? (inputs tx) Œª i _ ‚Üí
         outputRef i SET‚Çí.‚àà? SET‚Çí.list (unspentOutputs l)
... | no ¬¨p = no (¬¨p ‚àò validOutputRefs)
... | yes v‚ÇÉ
  -- validDataScriptTypes
  with ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
         D i ‚âü·µ§ Data (lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà))
... | no ¬¨p  = no (¬¨p ‚àò {!validDataScriptTypes!})
... | yes v‚ÇÑ
  -- preservesValues
   with forge tx + sum (mapWith‚àà (inputs tx) Œª {i} i‚àà ‚Üí
                   lookupValue l i (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà))
          ‚âü
        fee tx + Œ£[ value ‚àà outputs tx ]
... | no ¬¨p = no (¬¨p ‚àò {!preservesValues!})
... | yes v‚ÇÖ
  -- noDoubleSpending
  with SET‚Çí.noDuplicates? (map outputRef (inputs tx))
... | no ¬¨p = no (¬¨p ‚àò noDoubleSpending)
... | yes v‚ÇÜ
  -- allInputsValidate
  with ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
         let
           out : TxOutput
           out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
         in
           ‚àÄstate? Œª st ‚Üí
             T? (runValidation i out (v‚ÇÑ i i‚àà) st)
... | no ¬¨p = no (¬¨p ‚àò {!allInputsValidate!})
... | yes v‚Çá
  -- validateValidHashes
  with ‚àÄ? (inputs tx) Œª i i‚àà ‚Üí
         let
           out : TxOutput
           out = lookupOutput l (outputRef i) (v‚ÇÅ i i‚àà) (v‚ÇÇ i i‚àà)
         in
           to‚Ñï (address out) ‚âü (validator i) ‚ôØ
... | no ¬¨p = no (¬¨p ‚àò {!validateValidHashes!})
... | yes v‚Çà = yes (record
                      { validTxRefs = v‚ÇÅ
                      ; validOutputIndices = v‚ÇÇ
                      ; validOutputRefs = v‚ÇÉ
                      ; validDataScriptTypes = v‚ÇÑ
                      ; preservesValues = v‚ÇÖ
                      ; noDoubleSpending = v‚ÇÜ
                      ; allInputsValidate = v‚Çá
                      ; validateValidHashes = v‚Çà
                      })
